public static void SelectionSort(int[]);
  descriptor: ([I)V
  flags: ACC_PUBLIC, ACC_STATIC
  Code:
    stack=4, locals=4, args_size=1
        0: iconst_0           // push int value 0 onto stack
        1: istore_1           // pop int value from stack into local variable 1 (i)
        2: iload_1            // push int value from local variable 1 (i) onto stack
        3: aload_0            // push array reference to local variable 0 (arr) onto stack
        4: arraylength        // pop array from stack and push length of the array onto stack
        5: if_icmpge     57   // pop two values from stack, if first value is greater than or
                              // equal to second value, branch to instruction at offset 57
        8: iload_1            // push int value from local variable 1 (i) onto stack
        9: istore_2           // pop int value from stack and save it in local variable 2 (least)
      10: iload_1             // from now on, already seen instructions will be omitted :-)
      11: iconst_1            // push int value 1 onto stack
      12: iadd                // pop two values from stack, add them together and push the result onto stack
      13: istore_3            // pop int value from stack and save it in local variable 3 (j)
      14: iload_3
      15: aload_0             // push reference to stack for local variable 0 (arr)
      16: arraylength
      17: if_icmpge     37
      20: aload_0
      21: iload_3
      22: iaload              // pop two values from stack, an integer (for index) and an array,
                              // and get the value at that position in the array
      23: aload_0
      24: iload_2
      25: iaload
      26: if_icmpge     31
      29: iload_3
      30: istore_2
      31: iinc          3, 1  // increment local variable 3 (j) with 1
      34: goto          14    // branch to instruction 14
      37: aload_0
      38: iload_1
      39: iaload
      // here an interesting compiler optimization happens
      40: istore_3            // note: reuses `j` as `tmp`, as `j` will no longer be used
      41: aload_0
      42: iload_1
      43: aload_0
      44: iload_2
      45: iaload
      46: iastore             // pop two values from stack, an integer (
      47: aload_0
      48: iload_2
      49: iload_3
      50: iastore
      51: iinc          1, 1
      54: goto          2
      57: return
